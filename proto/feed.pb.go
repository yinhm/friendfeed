// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feed.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FeedType int32

const (
	FeedType_user    FeedType = 0
	FeedType_group   FeedType = 1
	FeedType_special FeedType = 2
)

var FeedType_name = map[int32]string{
	0: "user",
	1: "group",
	2: "special",
}

var FeedType_value = map[string]int32{
	"user":    0,
	"group":   1,
	"special": 2,
}

func (x FeedType) String() string {
	return proto.EnumName(FeedType_name, int32(x))
}

func (FeedType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{0}
}

type StatusType int32

const (
	StatusType_private StatusType = 0
	StatusType_public  StatusType = 1
)

var StatusType_name = map[int32]string{
	0: "private",
	1: "public",
}

var StatusType_value = map[string]int32{
	"private": 0,
	"public":  1,
}

func (x StatusType) String() string {
	return proto.EnumName(StatusType_name, int32(x))
}

func (StatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{1}
}

type OAuthUser struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// User info from oauth2 providers
	// sequence
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// login
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NickName             string   `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	AvaterUrl            string   `protobuf:"bytes,5,opt,name=avater_url,json=avaterUrl,proto3" json:"avater_url,omitempty"`
	Email                string   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	AccessToken          string   `protobuf:"bytes,7,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	AccessTokenSecret    string   `protobuf:"bytes,10,opt,name=access_token_secret,json=accessTokenSecret,proto3" json:"access_token_secret,omitempty"`
	Provider             string   `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	RemoteKey            string   `protobuf:"bytes,9,opt,name=remote_key,json=remoteKey,proto3" json:"remote_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthUser) Reset()         { *m = OAuthUser{} }
func (m *OAuthUser) String() string { return proto.CompactTextString(m) }
func (*OAuthUser) ProtoMessage()    {}
func (*OAuthUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{0}
}

func (m *OAuthUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuthUser.Unmarshal(m, b)
}
func (m *OAuthUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuthUser.Marshal(b, m, deterministic)
}
func (m *OAuthUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthUser.Merge(m, src)
}
func (m *OAuthUser) XXX_Size() int {
	return xxx_messageInfo_OAuthUser.Size(m)
}
func (m *OAuthUser) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthUser.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthUser proto.InternalMessageInfo

func (m *OAuthUser) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *OAuthUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *OAuthUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OAuthUser) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *OAuthUser) GetAvaterUrl() string {
	if m != nil {
		return m.AvaterUrl
	}
	return ""
}

func (m *OAuthUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *OAuthUser) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *OAuthUser) GetAccessTokenSecret() string {
	if m != nil {
		return m.AccessTokenSecret
	}
	return ""
}

func (m *OAuthUser) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *OAuthUser) GetRemoteKey() string {
	if m != nil {
		return m.RemoteKey
	}
	return ""
}

// id map
type Profile struct {
	// the FriendFeed UUID
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// v1 nicknameo or v2 id, in URL
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// the user's full name, display name
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Picture string `protobuf:"bytes,9,opt,name=picture,proto3" json:"picture,omitempty"`
	// One of "user", "group", or "special"
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// true if the feed is private
	Private bool `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`
	// SUP (Simple Update Protocol)
	// https://code.google.com/p/simpleupdateprotocol/
	SupId       string `protobuf:"bytes,6,opt,name=sup_id,json=supId,proto3" json:"sup_id,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// TODO: remove this
	RemoteKey string `protobuf:"bytes,8,opt,name=remote_key,json=remoteKey,proto3" json:"remote_key,omitempty"`
	// mark deletion, will purge all related data later
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{1}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func (m *Profile) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Profile) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Profile) GetSupId() string {
	if m != nil {
		return m.SupId
	}
	return ""
}

func (m *Profile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Profile) GetRemoteKey() string {
	if m != nil {
		return m.RemoteKey
	}
	return ""
}

func (m *Profile) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// social graph
type Graph struct {
	Subscribers          map[string]*Profile `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subscriptions        map[string]*Profile `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Admins               map[string]*Profile `protobuf:"bytes,3,rep,name=admins,proto3" json:"admins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Feeds                map[string]*Profile `protobuf:"bytes,4,rep,name=feeds,proto3" json:"feeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Services             map[string]*Service `protobuf:"bytes,5,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Graph) Reset()         { *m = Graph{} }
func (m *Graph) String() string { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()    {}
func (*Graph) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{2}
}

func (m *Graph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Graph.Unmarshal(m, b)
}
func (m *Graph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Graph.Marshal(b, m, deterministic)
}
func (m *Graph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Graph.Merge(m, src)
}
func (m *Graph) XXX_Size() int {
	return xxx_messageInfo_Graph.Size(m)
}
func (m *Graph) XXX_DiscardUnknown() {
	xxx_messageInfo_Graph.DiscardUnknown(m)
}

var xxx_messageInfo_Graph proto.InternalMessageInfo

func (m *Graph) GetSubscribers() map[string]*Profile {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *Graph) GetSubscriptions() map[string]*Profile {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Graph) GetAdmins() map[string]*Profile {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Graph) GetFeeds() map[string]*Profile {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func (m *Graph) GetServices() map[string]*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// status - private or public
// id - the user's FriendFeed UUID
// name - the user's full name
// nickname - the user's FriendFeed nickname, used in FriendFeed URLs
// profileUrl - the user's profile URL on FriendFeed
// services[] - the services connected to the user's account
//   * id - the service's FriendFeed ID, e.g., "picasa"
//   * name - the service's official name, e.g., "Picasa Web Albums"
//   * url - the official URL of the service, e.g., http://picasaweb.google.com/
//   * iconUrl - the URL of the favicon for this service
//   * profileUrl? - the user's profile URL on this service, if any
//   * username? - the user's username for this service, if any
// subscriptions[] - the users this user is subscribed to
//   * id
//   * name
//   * nickname
//   * profileUrl
// rooms[] - the rooms this user is a member of
//   * id - the room's FriendFeed UUID
//   * name - the room's display name
//   * nickname - the room's FriendFeed nickname, used in FriendFeed URLs
//   * url - the room's URL on FriendFeed
// lists[] - the lists this user is a member of (only visible if authenticated as this user)
//   * id - the list's FriendFeed UUID
//   * name - the list's display name
//   * nickname - the list's FriendFeed nickname, used in FriendFeed URLs
//   * url - the list's URL on FriendFeed
type V1Profile struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// FriendFeed UUID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// full name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// used in URL
	Nickname             string       `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProfileUrl           string       `protobuf:"bytes,5,opt,name=profileUrl,proto3" json:"profileUrl,omitempty"`
	Services             []*V1Profile `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty"`
	Subscriptions        []*V1Profile `protobuf:"bytes,7,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Rooms                []*V1Profile `protobuf:"bytes,8,rep,name=rooms,proto3" json:"rooms,omitempty"`
	Lists                []*V1Profile `protobuf:"bytes,9,rep,name=lists,proto3" json:"lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *V1Profile) Reset()         { *m = V1Profile{} }
func (m *V1Profile) String() string { return proto.CompactTextString(m) }
func (*V1Profile) ProtoMessage()    {}
func (*V1Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{3}
}

func (m *V1Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V1Profile.Unmarshal(m, b)
}
func (m *V1Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V1Profile.Marshal(b, m, deterministic)
}
func (m *V1Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V1Profile.Merge(m, src)
}
func (m *V1Profile) XXX_Size() int {
	return xxx_messageInfo_V1Profile.Size(m)
}
func (m *V1Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_V1Profile.DiscardUnknown(m)
}

var xxx_messageInfo_V1Profile proto.InternalMessageInfo

func (m *V1Profile) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *V1Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *V1Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *V1Profile) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *V1Profile) GetProfileUrl() string {
	if m != nil {
		return m.ProfileUrl
	}
	return ""
}

func (m *V1Profile) GetServices() []*V1Profile {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *V1Profile) GetSubscriptions() []*V1Profile {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *V1Profile) GetRooms() []*V1Profile {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *V1Profile) GetLists() []*V1Profile {
	if m != nil {
		return m.Lists
	}
	return nil
}

// Feed
// id - The feed id, e.g., "bret" or "bret/comments"
// name - Display name of the feed, e.g., "Bret Taylor"
// sup_id - Simple Update Protocol
// description? - Profile description, an HTML string
// type - One of "user", "group", or "special"
// private - true if the feed is private.
// commands[]? - List of allowed commands for the authenticated user on this feed: "subscribe", "unsubscribe", "post", "dm", "admin"
//
// Full feeds have all of the fields above, plus the following field:
// entries[]{} - List of the entries in this feed.
type Feed struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Picture string `protobuf:"bytes,11,opt,name=picture,proto3" json:"picture,omitempty"`
	// SUP (Simple Update Protocol)
	// https://code.google.com/p/simpleupdateprotocol/
	SupId       string `protobuf:"bytes,4,opt,name=sup_id,json=supId,proto3" json:"sup_id,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// One of "user", "group", or "special"
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// true if the feed is private
	Private  bool     `protobuf:"varint,7,opt,name=private,proto3" json:"private,omitempty"`
	Commands []string `protobuf:"bytes,8,rep,name=commands,proto3" json:"commands,omitempty"`
	Entries  []*Entry `protobuf:"bytes,9,rep,name=entries,proto3" json:"entries,omitempty"`
	// TODO: remove this
	RemoteKey            string   `protobuf:"bytes,10,opt,name=remote_key,json=remoteKey,proto3" json:"remote_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feed) Reset()         { *m = Feed{} }
func (m *Feed) String() string { return proto.CompactTextString(m) }
func (*Feed) ProtoMessage()    {}
func (*Feed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{4}
}

func (m *Feed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feed.Unmarshal(m, b)
}
func (m *Feed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feed.Marshal(b, m, deterministic)
}
func (m *Feed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feed.Merge(m, src)
}
func (m *Feed) XXX_Size() int {
	return xxx_messageInfo_Feed.Size(m)
}
func (m *Feed) XXX_DiscardUnknown() {
	xxx_messageInfo_Feed.DiscardUnknown(m)
}

var xxx_messageInfo_Feed proto.InternalMessageInfo

func (m *Feed) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Feed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Feed) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feed) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func (m *Feed) GetSupId() string {
	if m != nil {
		return m.SupId
	}
	return ""
}

func (m *Feed) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Feed) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Feed) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Feed) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Feed) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Feed) GetRemoteKey() string {
	if m != nil {
		return m.RemoteKey
	}
	return ""
}

// /feedinfo - Feed information
// Return information about the feed with the specified feed id:
//
// http://friendfeed-api.com/v2/feedinfo/feed id
//
// The response is a feed, plus the following fields:
//
// subscriptions[]? - The users and groups this feed is subscribed to
// subscribers[]? - The users subscribed to this feed
// admins[]{}? - For groups, the list of group administrators
// feeds[]? - For special feeds, the feeds that are contained within this feed. For example, for a friend list feed, this property lists all of the users/groups in the friend list.
// services[]{}? - Services associated with the feed (e.g., Twitter or an imported blog)
//   * id - the service's id, e.g., "picasa"
//   * name - the service's official name, e.g., "Picasa Web Albums"
//   * url - the official URL of the service, e.g., "http://picasaweb.google.com/"
//   * icon - the URL of the favicon for this service
//   * profile? - the profile URL for this service, if any
//   * username? - the username for this service, if any
type Feedinfo struct {
	// Feed
	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Picture string `protobuf:"bytes,16,opt,name=picture,proto3" json:"picture,omitempty"`
	// SUP (Simple Update Protocol)
	// https://code.google.com/p/simpleupdateprotocol/
	SupId       string `protobuf:"bytes,4,opt,name=sup_id,json=supId,proto3" json:"sup_id,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// One of "user", "group", or "special"
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// true if the feed is private
	Private  bool     `protobuf:"varint,7,opt,name=private,proto3" json:"private,omitempty"`
	Commands []string `protobuf:"bytes,8,rep,name=commands,proto3" json:"commands,omitempty"`
	Entries  []*Entry `protobuf:"bytes,9,rep,name=entries,proto3" json:"entries,omitempty"`
	// Feedinfo
	Subscribers   []*Profile `protobuf:"bytes,10,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	Subscriptions []*Profile `protobuf:"bytes,11,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Admins        []*Profile `protobuf:"bytes,12,rep,name=admins,proto3" json:"admins,omitempty"`
	Feeds         []*Profile `protobuf:"bytes,13,rep,name=feeds,proto3" json:"feeds,omitempty"`
	Services      []*Service `protobuf:"bytes,14,rep,name=services,proto3" json:"services,omitempty"`
	// TODO: remove this
	RemoteKey            string   `protobuf:"bytes,15,opt,name=remote_key,json=remoteKey,proto3" json:"remote_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feedinfo) Reset()         { *m = Feedinfo{} }
func (m *Feedinfo) String() string { return proto.CompactTextString(m) }
func (*Feedinfo) ProtoMessage()    {}
func (*Feedinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{5}
}

func (m *Feedinfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feedinfo.Unmarshal(m, b)
}
func (m *Feedinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feedinfo.Marshal(b, m, deterministic)
}
func (m *Feedinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feedinfo.Merge(m, src)
}
func (m *Feedinfo) XXX_Size() int {
	return xxx_messageInfo_Feedinfo.Size(m)
}
func (m *Feedinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Feedinfo.DiscardUnknown(m)
}

var xxx_messageInfo_Feedinfo proto.InternalMessageInfo

func (m *Feedinfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Feedinfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Feedinfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feedinfo) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func (m *Feedinfo) GetSupId() string {
	if m != nil {
		return m.SupId
	}
	return ""
}

func (m *Feedinfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Feedinfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Feedinfo) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Feedinfo) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Feedinfo) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Feedinfo) GetSubscribers() []*Profile {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *Feedinfo) GetSubscriptions() []*Profile {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Feedinfo) GetAdmins() []*Profile {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Feedinfo) GetFeeds() []*Profile {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func (m *Feedinfo) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Feedinfo) GetRemoteKey() string {
	if m != nil {
		return m.RemoteKey
	}
	return ""
}

// services[]{}? - Services associated with the feed (e.g., Twitter or an imported blog)
//   * id - the service's id, e.g., "picasa"
//   * name - the service's official name, e.g., "Picasa Web Albums"
//   * url - the official URL of the service, e.g., "http://picasaweb.google.com/"
//   * icon - the URL of the favicon for this service
//   * profile? - the profile URL for this service, if any
//   * username? - the username for this service, if any
type Service struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 string     `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Profile              string     `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	Username             string     `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Oauth                *OAuthUser `protobuf:"bytes,6,opt,name=oauth,proto3" json:"oauth,omitempty"`
	Created              int64      `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Updated              int64      `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{6}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Service) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *Service) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Service) GetOauth() *OAuthUser {
	if m != nil {
		return m.Oauth
	}
	return nil
}

func (m *Service) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Service) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// Entry
// id - The FriendFeed entry id, used to add comments/likes to the entry
// url - URL of the entry page on the FriendFeed website.
// date - The date the entry was posted.
// body - The HTML body of the entry. URLs are turned into links. A best effort is made to resolve shortened URLs and use the final destination as the title of the link.
// from{} - The user or group who posted this entry, a feed object
// to[]{}? - List of feeds to which this entry was published, a list of feed objects
// comments[]{}? - list of comments ordered by date
// likes[]{}? - list of likes for this entry, ordered to present the authenticated user's friends first, and then all other other people who liked the entry
// thumbnails[]{}? - List of thumbnails
//   * url - Image URL
//   * link - The URL the thumbnail should link to
//   * width? - Image width
//   * height? - Image height
//   * player? - the player for this media file (e.g., the YouTube.com <embed> code)
// files[]{}? - List of files attached to this entry
//   * url - File URL
//   * type - File MIME type (e.g., "application/pdf")
//   * name - File name
//   * icon - URL of file type icon. Always 16x16.
//   * size? - File size in bytes
// via{}? - If present, the application or service that created the entry.
//   * name - The name of the entry source, e.g., "Google Reader", "Bookmarklet"
//   * url - URL of the entry source
// geo{}? - Present if the entry contains geographic information
//   * lat - The latitude
//   * long - The longitude
// commands[]? - List of allowed commands for the authenticated user: "comment", "like", "unlike", "edit", "delete", "hide", "unhide"
type Entry struct {
	// entry uuid with prefix: "e/"
	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url        string       `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Date       string       `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Body       string       `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	RawBody    string       `protobuf:"bytes,5,opt,name=rawBody,proto3" json:"rawBody,omitempty"`
	RawLink    string       `protobuf:"bytes,6,opt,name=rawLink,proto3" json:"rawLink,omitempty"`
	From       *Feed        `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
	To         []*Feed      `protobuf:"bytes,8,rep,name=to,proto3" json:"to,omitempty"`
	Comments   []*Comment   `protobuf:"bytes,9,rep,name=comments,proto3" json:"comments,omitempty"`
	Likes      []*Like      `protobuf:"bytes,10,rep,name=likes,proto3" json:"likes,omitempty"`
	Thumbnails []*Thumbnail `protobuf:"bytes,11,rep,name=thumbnails,proto3" json:"thumbnails,omitempty"`
	Files      []*File      `protobuf:"bytes,12,rep,name=files,proto3" json:"files,omitempty"`
	Via        *Via         `protobuf:"bytes,13,opt,name=via,proto3" json:"via,omitempty"`
	Geo        *Location    `protobuf:"bytes,14,opt,name=geo,proto3" json:"geo,omitempty"`
	Commands   []string     `protobuf:"bytes,15,rep,name=commands,proto3" json:"commands,omitempty"`
	// custom filed
	// TODO: duplicated with from field
	ProfileUuid          string   `protobuf:"bytes,16,opt,name=profile_uuid,json=profileUuid,proto3" json:"profile_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{7}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entry) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Entry) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Entry) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Entry) GetRawBody() string {
	if m != nil {
		return m.RawBody
	}
	return ""
}

func (m *Entry) GetRawLink() string {
	if m != nil {
		return m.RawLink
	}
	return ""
}

func (m *Entry) GetFrom() *Feed {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Entry) GetTo() []*Feed {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Entry) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Entry) GetLikes() []*Like {
	if m != nil {
		return m.Likes
	}
	return nil
}

func (m *Entry) GetThumbnails() []*Thumbnail {
	if m != nil {
		return m.Thumbnails
	}
	return nil
}

func (m *Entry) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Entry) GetVia() *Via {
	if m != nil {
		return m.Via
	}
	return nil
}

func (m *Entry) GetGeo() *Location {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Entry) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Entry) GetProfileUuid() string {
	if m != nil {
		return m.ProfileUuid
	}
	return ""
}

// Comment
// id - The id of the comment
// date - The date the comment was posted.
// body - The HTML body of the comment. URLs are turned into links.
// from{} - The user or group who posted this comment, a feed object
// via{}? - present if comment was created by a third party application.
//   * name - the name of the application, e.g., "BuddyFeed"
//   * url - URL of the source, e.g., "http://www.codewalrus.com/buddyfeed/"
// commands[]? - List of allowed commands for the authenticated user: "edit", "delete"
type Comment struct {
	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Date     string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Body     string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	RawBody  string   `protobuf:"bytes,4,opt,name=rawBody,proto3" json:"rawBody,omitempty"`
	From     *Feed    `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	Via      *Via     `protobuf:"bytes,6,opt,name=via,proto3" json:"via,omitempty"`
	Commands []string `protobuf:"bytes,7,rep,name=commands,proto3" json:"commands,omitempty"`
	// when maxcomments=auto on feed
	Placeholder          bool     `protobuf:"varint,8,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	Num                  int32    `protobuf:"varint,9,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{8}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Comment) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Comment) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Comment) GetRawBody() string {
	if m != nil {
		return m.RawBody
	}
	return ""
}

func (m *Comment) GetFrom() *Feed {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Comment) GetVia() *Via {
	if m != nil {
		return m.Via
	}
	return nil
}

func (m *Comment) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Comment) GetPlaceholder() bool {
	if m != nil {
		return m.Placeholder
	}
	return false
}

func (m *Comment) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// Like
// date
// from{} - The user who liked the parent entry.
type Like struct {
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	From *Feed  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// when maxlikes=auto on feed
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Placeholder          bool     `protobuf:"varint,8,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	Num                  int32    `protobuf:"varint,9,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Like) Reset()         { *m = Like{} }
func (m *Like) String() string { return proto.CompactTextString(m) }
func (*Like) ProtoMessage()    {}
func (*Like) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{9}
}

func (m *Like) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Like.Unmarshal(m, b)
}
func (m *Like) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Like.Marshal(b, m, deterministic)
}
func (m *Like) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Like.Merge(m, src)
}
func (m *Like) XXX_Size() int {
	return xxx_messageInfo_Like.Size(m)
}
func (m *Like) XXX_DiscardUnknown() {
	xxx_messageInfo_Like.DiscardUnknown(m)
}

var xxx_messageInfo_Like proto.InternalMessageInfo

func (m *Like) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Like) GetFrom() *Feed {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Like) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Like) GetPlaceholder() bool {
	if m != nil {
		return m.Placeholder
	}
	return false
}

func (m *Like) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// thumbnails - List of thumbnails
//   * url - Image URL
//   * link - The URL the thumbnail should link to
//   * width? - Image width
//   * height? - Image height
//   * player? - the player for this media file (e.g., the YouTube.com <embed> code)
type Thumbnail struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Link                 string   `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Width                int32    `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Player               string   `protobuf:"bytes,5,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thumbnail) Reset()         { *m = Thumbnail{} }
func (m *Thumbnail) String() string { return proto.CompactTextString(m) }
func (*Thumbnail) ProtoMessage()    {}
func (*Thumbnail) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{10}
}

func (m *Thumbnail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thumbnail.Unmarshal(m, b)
}
func (m *Thumbnail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thumbnail.Marshal(b, m, deterministic)
}
func (m *Thumbnail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thumbnail.Merge(m, src)
}
func (m *Thumbnail) XXX_Size() int {
	return xxx_messageInfo_Thumbnail.Size(m)
}
func (m *Thumbnail) XXX_DiscardUnknown() {
	xxx_messageInfo_Thumbnail.DiscardUnknown(m)
}

var xxx_messageInfo_Thumbnail proto.InternalMessageInfo

func (m *Thumbnail) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Thumbnail) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Thumbnail) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Thumbnail) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Thumbnail) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

// File
// url - File URL
// type - File MIME type (e.g., "application/pdf")
// name - File name
// icon - URL of file type icon. Always 16x16.
// size? - File size in bytes
type File struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 string   `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Size                 int32    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{11}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *File) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *File) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// Via
// name - the name of the application, e.g., "BuddyFeed"
// url - URL of the source, e.g., "http://www.codewalrus.com/buddyfeed/"
type Via struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Via) Reset()         { *m = Via{} }
func (m *Via) String() string { return proto.CompactTextString(m) }
func (*Via) ProtoMessage()    {}
func (*Via) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{12}
}

func (m *Via) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Via.Unmarshal(m, b)
}
func (m *Via) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Via.Marshal(b, m, deterministic)
}
func (m *Via) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Via.Merge(m, src)
}
func (m *Via) XXX_Size() int {
	return xxx_messageInfo_Via.Size(m)
}
func (m *Via) XXX_DiscardUnknown() {
	xxx_messageInfo_Via.DiscardUnknown(m)
}

var xxx_messageInfo_Via proto.InternalMessageInfo

func (m *Via) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Via) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// geographic information
type Location struct {
	Latitude             float64  `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7a672c1337cb5ac, []int{13}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.FeedType", FeedType_name, FeedType_value)
	proto.RegisterEnum("proto.StatusType", StatusType_name, StatusType_value)
	proto.RegisterType((*OAuthUser)(nil), "proto.OAuthUser")
	proto.RegisterType((*Profile)(nil), "proto.Profile")
	proto.RegisterType((*Graph)(nil), "proto.Graph")
	proto.RegisterMapType((map[string]*Profile)(nil), "proto.Graph.AdminsEntry")
	proto.RegisterMapType((map[string]*Profile)(nil), "proto.Graph.FeedsEntry")
	proto.RegisterMapType((map[string]*Service)(nil), "proto.Graph.ServicesEntry")
	proto.RegisterMapType((map[string]*Profile)(nil), "proto.Graph.SubscribersEntry")
	proto.RegisterMapType((map[string]*Profile)(nil), "proto.Graph.SubscriptionsEntry")
	proto.RegisterType((*V1Profile)(nil), "proto.V1Profile")
	proto.RegisterType((*Feed)(nil), "proto.Feed")
	proto.RegisterType((*Feedinfo)(nil), "proto.Feedinfo")
	proto.RegisterType((*Service)(nil), "proto.Service")
	proto.RegisterType((*Entry)(nil), "proto.Entry")
	proto.RegisterType((*Comment)(nil), "proto.Comment")
	proto.RegisterType((*Like)(nil), "proto.Like")
	proto.RegisterType((*Thumbnail)(nil), "proto.Thumbnail")
	proto.RegisterType((*File)(nil), "proto.File")
	proto.RegisterType((*Via)(nil), "proto.Via")
	proto.RegisterType((*Location)(nil), "proto.Location")
}

func init() { proto.RegisterFile("feed.proto", fileDescriptor_d7a672c1337cb5ac) }

var fileDescriptor_d7a672c1337cb5ac = []byte{
	// 1302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xdd, 0x6e, 0xdc, 0xc4,
	0x17, 0xaf, 0xbd, 0xf6, 0xae, 0xf7, 0x38, 0x49, 0xf7, 0x3f, 0x7f, 0xa0, 0x56, 0xda, 0xd2, 0x64,
	0x55, 0xaa, 0xaa, 0x94, 0xa8, 0x14, 0x54, 0x21, 0x6e, 0x50, 0x81, 0x02, 0x55, 0xab, 0x52, 0xb9,
	0x1f, 0xb7, 0x2b, 0xc7, 0x9e, 0x64, 0x47, 0xeb, 0xb5, 0xad, 0xb1, 0x9d, 0x2a, 0xdc, 0x72, 0xc3,
	0x73, 0x70, 0xdd, 0x17, 0xe0, 0x39, 0x78, 0x08, 0x24, 0x5e, 0x81, 0x1b, 0x74, 0xce, 0xcc, 0x78,
	0x6d, 0xc7, 0x41, 0x15, 0xed, 0x0d, 0x57, 0x99, 0x33, 0xbf, 0x73, 0xce, 0x9e, 0xcf, 0xdf, 0x38,
	0x00, 0x47, 0x9c, 0x27, 0x07, 0x85, 0xcc, 0xab, 0x9c, 0xb9, 0xf4, 0x67, 0xfe, 0xda, 0x86, 0xe9,
	0x8f, 0xf7, 0xeb, 0x6a, 0xf9, 0xa2, 0xe4, 0x92, 0x31, 0x70, 0xea, 0x5a, 0x24, 0x81, 0xb5, 0x67,
	0xdd, 0x9c, 0x86, 0x74, 0x66, 0x97, 0x60, 0x52, 0x97, 0x5c, 0x2e, 0x44, 0x12, 0xd8, 0x74, 0x3d,
	0x46, 0xf1, 0x61, 0x82, 0xca, 0x59, 0xb4, 0xe6, 0xc1, 0x48, 0x29, 0xe3, 0x99, 0x5d, 0x86, 0x69,
	0x26, 0xe2, 0xd5, 0x82, 0x00, 0x87, 0x00, 0x0f, 0x2f, 0x9e, 0x20, 0x78, 0x15, 0x20, 0x3a, 0x89,
	0x2a, 0x2e, 0x17, 0xb5, 0x4c, 0x03, 0x97, 0xd0, 0xa9, 0xba, 0x79, 0x21, 0x53, 0xf6, 0x1e, 0xb8,
	0x7c, 0x1d, 0x89, 0x34, 0x18, 0x13, 0xa2, 0x04, 0xb6, 0x0f, 0x5b, 0x51, 0x1c, 0xf3, 0xb2, 0x5c,
	0x54, 0xf9, 0x8a, 0x67, 0xc1, 0x84, 0x40, 0x5f, 0xdd, 0x3d, 0xc7, 0x2b, 0x76, 0x00, 0xff, 0x6f,
	0xab, 0x2c, 0x4a, 0x1e, 0x4b, 0x5e, 0x05, 0x40, 0x9a, 0xff, 0x6b, 0x69, 0x3e, 0x23, 0x80, 0xed,
	0x82, 0x57, 0xc8, 0xfc, 0x44, 0x24, 0x5c, 0x06, 0x9e, 0x8a, 0xd1, 0xc8, 0x18, 0xa3, 0xe4, 0xeb,
	0xbc, 0xe2, 0x8b, 0x15, 0x3f, 0x0d, 0xa6, 0x2a, 0x46, 0x75, 0xf3, 0x88, 0x9f, 0xce, 0xff, 0xb2,
	0x60, 0xf2, 0x54, 0xe6, 0x47, 0x22, 0xe5, 0x83, 0xc5, 0xda, 0x01, 0xbb, 0xa9, 0x93, 0x2d, 0x86,
	0x6b, 0x14, 0xc0, 0xa4, 0x10, 0x71, 0x55, 0x4b, 0xae, 0xfd, 0x1b, 0x11, 0xb5, 0xab, 0xd3, 0xc2,
	0x14, 0x8e, 0xce, 0xa4, 0x2d, 0x05, 0x16, 0x89, 0x2a, 0xe6, 0x85, 0x46, 0x64, 0xef, 0xc3, 0xb8,
	0xac, 0x0b, 0xec, 0x8b, 0x2e, 0x58, 0x59, 0x17, 0x0f, 0x13, 0xb6, 0x07, 0x7e, 0xc2, 0xcb, 0x58,
	0x8a, 0xa2, 0x12, 0x79, 0x53, 0xaf, 0xd6, 0x55, 0x2f, 0x47, 0xaf, 0x97, 0x23, 0xfe, 0x62, 0xc2,
	0x53, 0x5e, 0xf1, 0x84, 0x4a, 0xe8, 0x85, 0x46, 0x9c, 0xbf, 0x76, 0xc1, 0xfd, 0x5e, 0x46, 0xc5,
	0x92, 0x7d, 0x05, 0x7e, 0x59, 0x1f, 0xa2, 0xcb, 0x43, 0x2e, 0xcb, 0xc0, 0xda, 0x1b, 0xdd, 0xf4,
	0xef, 0x5e, 0x55, 0xa3, 0x75, 0x40, 0x2a, 0x07, 0xcf, 0x36, 0xf8, 0x83, 0xac, 0x92, 0xa7, 0x61,
	0xdb, 0x82, 0x3d, 0x80, 0x6d, 0x2d, 0x52, 0x4c, 0x65, 0x60, 0x93, 0x8b, 0x6b, 0x43, 0x2e, 0x94,
	0x86, 0x72, 0xd2, 0xb5, 0x62, 0x77, 0x60, 0x1c, 0x25, 0x6b, 0x91, 0x95, 0xc1, 0x88, 0xec, 0x83,
	0x8e, 0xfd, 0x7d, 0x82, 0x94, 0xa1, 0xd6, 0x63, 0x9f, 0x80, 0x8b, 0x5b, 0x50, 0x06, 0x0e, 0x19,
	0x5c, 0xea, 0x18, 0x7c, 0x87, 0x88, 0xd2, 0x57, 0x5a, 0xec, 0x1e, 0x78, 0x25, 0x97, 0x27, 0x22,
	0xe6, 0x65, 0xe0, 0x92, 0xc5, 0x6e, 0x37, 0x44, 0x0d, 0x2a, 0xa3, 0x46, 0x77, 0xf7, 0x09, 0xcc,
	0xfa, 0x05, 0x60, 0x33, 0x18, 0x61, 0xc1, 0xd5, 0xbc, 0xe0, 0x91, 0x5d, 0x07, 0xf7, 0x24, 0x4a,
	0x6b, 0x4e, 0x13, 0xe3, 0xdf, 0xdd, 0xd1, 0xae, 0xf5, 0x84, 0x85, 0x0a, 0xfc, 0xd2, 0xfe, 0xc2,
	0xda, 0x7d, 0x0a, 0xec, 0x6c, 0x35, 0xde, 0xca, 0xe3, 0x43, 0xf0, 0x5b, 0xf5, 0x79, 0x2b, 0x57,
	0x3f, 0x00, 0x6c, 0x2a, 0xf7, 0x56, 0x9e, 0x1e, 0xc1, 0x76, 0xa7, 0xa2, 0x6f, 0xee, 0x4c, 0x9b,
	0xb5, 0x9c, 0xcd, 0x7f, 0xb3, 0x61, 0xfa, 0xf2, 0x53, 0xb3, 0xae, 0x1f, 0xc0, 0xb8, 0xac, 0xa2,
	0xaa, 0x2e, 0xb5, 0x33, 0x2d, 0xbd, 0xd1, 0xca, 0xee, 0x02, 0xb1, 0x58, 0x9f, 0xd5, 0x08, 0xfb,
	0x10, 0xa0, 0x50, 0x3f, 0xf1, 0xa2, 0x61, 0xb5, 0xd6, 0x0d, 0xbb, 0xdd, 0x9a, 0xa0, 0x31, 0x4d,
	0xd0, 0x4c, 0x87, 0xdc, 0xc4, 0xb6, 0x99, 0x1b, 0x76, 0xaf, 0xbf, 0x17, 0x93, 0x73, 0x4c, 0x7a,
	0x8b, 0x70, 0x03, 0x5c, 0x99, 0xe7, 0xeb, 0x32, 0xf0, 0xce, 0xd1, 0x57, 0x30, 0xea, 0xa5, 0xa2,
	0xac, 0xca, 0x60, 0x7a, 0x9e, 0x1e, 0xc1, 0xf3, 0x5f, 0x6d, 0x70, 0xb0, 0xa7, 0xef, 0x82, 0xe5,
	0xfc, 0x2e, 0xcb, 0x6d, 0x78, 0xcb, 0xf9, 0x07, 0xde, 0x72, 0xcf, 0xf2, 0x96, 0xa1, 0xc7, 0xf1,
	0x30, 0x3d, 0x4e, 0xba, 0xf4, 0xb8, 0x0b, 0x5e, 0x9c, 0xaf, 0xd7, 0x51, 0x96, 0xa8, 0xa2, 0x4c,
	0xc3, 0x46, 0x66, 0x37, 0x60, 0xc2, 0xb3, 0x4a, 0x0a, 0x6e, 0xea, 0xb0, 0xa5, 0xeb, 0xa0, 0xd6,
	0xd8, 0x80, 0x3d, 0xa6, 0x84, 0xfe, 0x6b, 0xf0, 0x8b, 0x03, 0x1e, 0x16, 0x49, 0x64, 0x47, 0xf9,
	0xbb, 0x28, 0xd4, 0xec, 0x3f, 0x5b, 0xa8, 0x3b, 0xdd, 0xf7, 0x00, 0x48, 0xb7, 0xbf, 0xe7, 0x9d,
	0x07, 0xe0, 0xf3, 0xfe, 0xa0, 0xfb, 0x83, 0x36, 0x67, 0xc6, 0xdc, 0xf0, 0xfd, 0xd6, 0xa0, 0xba,
	0x61, 0xf9, 0xeb, 0x86, 0xe5, 0xb7, 0x07, 0xd5, 0x34, 0xb9, 0xdf, 0x6a, 0xad, 0xe6, 0x4e, 0x47,
	0xd1, 0xb0, 0xc9, 0x66, 0x31, 0xbb, 0xa3, 0x70, 0xb1, 0x3f, 0x0a, 0xbf, 0x5b, 0x30, 0xd1, 0x46,
	0xba, 0xeb, 0xd6, 0x99, 0xae, 0xdb, 0xad, 0xae, 0x33, 0x70, 0x44, 0x9c, 0x67, 0x66, 0x12, 0xf0,
	0xac, 0x5a, 0x44, 0x01, 0xea, 0x86, 0x1b, 0x11, 0x5b, 0x84, 0x1f, 0x5d, 0xe4, 0x45, 0xf5, 0xbb,
	0x91, 0x71, 0xa3, 0xf3, 0xa8, 0xae, 0x96, 0xd4, 0xed, 0xcd, 0x46, 0x37, 0x1f, 0x75, 0xa1, 0x82,
	0xd1, 0x7b, 0x2c, 0x79, 0x84, 0xcf, 0x3a, 0x0e, 0xc0, 0x28, 0x34, 0x22, 0x22, 0x75, 0x91, 0x10,
	0xe2, 0x29, 0x44, 0x8b, 0xf3, 0x3f, 0x46, 0xe0, 0x2a, 0x1e, 0xee, 0xe7, 0x34, 0x83, 0x11, 0x7e,
	0xc4, 0xa9, 0x94, 0xf0, 0x88, 0x19, 0xa1, 0x91, 0xc9, 0x08, 0xcf, 0x78, 0x77, 0x98, 0x27, 0xa7,
	0xe6, 0x83, 0x06, 0xcf, 0xf8, 0x6b, 0x32, 0x7a, 0xf5, 0x35, 0x5e, 0xab, 0x54, 0x8c, 0xa8, 0x91,
	0xc7, 0x22, 0x5b, 0xe9, 0xc9, 0x35, 0x22, 0xbb, 0x06, 0xce, 0x91, 0xcc, 0xd7, 0x14, 0xb8, 0x7f,
	0xd7, 0xd7, 0x29, 0xe2, 0xea, 0x85, 0x04, 0xb0, 0xcb, 0x60, 0x57, 0xb9, 0xe6, 0xbe, 0x0e, 0x6c,
	0x57, 0x39, 0xb6, 0x19, 0x07, 0x9a, 0x67, 0x0d, 0xed, 0x99, 0x36, 0x7f, 0xa3, 0xae, 0xc3, 0x06,
	0x67, 0xfb, 0xc8, 0x8f, 0x2b, 0x6e, 0x46, 0xd8, 0xf8, 0x7a, 0x2c, 0x56, 0x44, 0x8d, 0x2b, 0x9a,
	0x75, 0xa8, 0x96, 0xf5, 0xfa, 0x30, 0x8b, 0x44, 0x6a, 0xc6, 0xd6, 0x54, 0xfd, 0xb9, 0x01, 0xc2,
	0x96, 0x0e, 0x3a, 0xc5, 0x36, 0x9a, 0xa1, 0x6d, 0x02, 0x54, 0xa3, 0x88, 0x08, 0xbb, 0x02, 0xa3,
	0x13, 0x11, 0x05, 0xdb, 0x94, 0x20, 0x18, 0x56, 0x16, 0x51, 0x88, 0xd7, 0x6c, 0x1f, 0x46, 0xc7,
	0x3c, 0x0f, 0x76, 0x08, 0xbd, 0x68, 0x62, 0xca, 0xe3, 0x08, 0xb7, 0x22, 0x44, 0xac, 0xb3, 0xc5,
	0x17, 0x7b, 0x5b, 0xbc, 0x0f, 0x5b, 0x7a, 0x92, 0x16, 0x44, 0x51, 0x8a, 0x67, 0x7c, 0xf3, 0x48,
	0xd5, 0x22, 0x99, 0xff, 0x69, 0xc1, 0x44, 0x57, 0x63, 0x68, 0x7e, 0xa9, 0xb3, 0xf6, 0x40, 0x67,
	0x47, 0xc3, 0x9d, 0x75, 0xba, 0x9d, 0x35, 0xfd, 0x73, 0xcf, 0xeb, 0x9f, 0x4e, 0x7f, 0x3c, 0x9c,
	0x7e, 0x3b, 0xb7, 0x49, 0x2f, 0xb7, 0x3d, 0xf0, 0x8b, 0x34, 0x8a, 0xf9, 0x32, 0x4f, 0xcd, 0xf7,
	0xbc, 0x17, 0xb6, 0xaf, 0x70, 0x54, 0xb3, 0x7a, 0x4d, 0xdf, 0xda, 0x6e, 0x88, 0xc7, 0xf9, 0xcf,
	0x16, 0x38, 0xd8, 0xd1, 0x26, 0x33, 0xab, 0x95, 0x99, 0x89, 0xd5, 0x3e, 0x2f, 0xd6, 0xa1, 0xd4,
	0xff, 0x4d, 0x14, 0xaf, 0x60, 0xda, 0x8c, 0x8b, 0xd9, 0x27, 0xab, 0xb3, 0x4f, 0x29, 0xae, 0x82,
	0xae, 0x3a, 0x9e, 0xf1, 0x5f, 0xa4, 0x57, 0x22, 0xa9, 0x96, 0xf4, 0xdb, 0x6e, 0xa8, 0x04, 0xfc,
	0xb2, 0x59, 0x72, 0x71, 0xbc, 0xac, 0xa8, 0xec, 0x6e, 0xa8, 0x25, 0xbc, 0x2f, 0xd2, 0xe8, 0x94,
	0x4b, 0xbd, 0x68, 0x5a, 0x9a, 0x2f, 0xc1, 0xc1, 0xd1, 0x1b, 0xfe, 0x4d, 0x7a, 0x38, 0xec, 0xd6,
	0xc3, 0x31, 0xf4, 0x66, 0x19, 0xf6, 0x72, 0x5a, 0xec, 0xc5, 0xc0, 0x29, 0xc5, 0x4f, 0x8a, 0x9f,
	0xdc, 0x90, 0xce, 0xf3, 0x8f, 0x61, 0xf4, 0x52, 0x44, 0x8d, 0x0b, 0xab, 0xe5, 0xe2, 0x0c, 0x81,
	0xcc, 0xbf, 0x05, 0xcf, 0x8c, 0x34, 0x76, 0x3c, 0x8d, 0x2a, 0x51, 0xd5, 0x89, 0xb2, 0xb2, 0xc2,
	0x46, 0x66, 0x57, 0x60, 0x9a, 0xe6, 0xd9, 0xb1, 0x02, 0x6d, 0x02, 0x37, 0x17, 0xb7, 0x6e, 0xab,
	0x27, 0xf9, 0x39, 0x86, 0xee, 0x81, 0x83, 0x34, 0x39, 0xbb, 0xc0, 0xa6, 0xe0, 0x1e, 0xcb, 0xbc,
	0x2e, 0x66, 0x16, 0xf3, 0x61, 0x52, 0x16, 0x3c, 0x16, 0x51, 0x3a, 0xb3, 0x6f, 0x7d, 0x04, 0xf0,
	0x8c, 0x3e, 0x03, 0x49, 0xdf, 0x6f, 0xde, 0xc8, 0xd9, 0x05, 0x06, 0x30, 0x2e, 0xea, 0xc3, 0x54,
	0xc4, 0x33, 0xeb, 0x70, 0x4c, 0x43, 0xf0, 0xd9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x25, 0x20,
	0x93, 0x03, 0x41, 0x0f, 0x00, 0x00,
}
