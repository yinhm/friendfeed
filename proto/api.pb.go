// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Worker struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Feed                 *Feed    `protobuf:"bytes,2,opt,name=feed,proto3" json:"feed,omitempty"`
	Job                  *FeedJob `protobuf:"bytes,3,opt,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Worker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Worker.Unmarshal(m, b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return xxx_messageInfo_Worker.Size(m)
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Worker) GetFeed() *Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *Worker) GetJob() *FeedJob {
	if m != nil {
		return m.Job
	}
	return nil
}

type FeedJob struct {
	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	RemoteKey string `protobuf:"bytes,3,opt,name=remote_key,json=remoteKey,proto3" json:"remote_key,omitempty"`
	TargetId  string `protobuf:"bytes,4,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Start     int32  `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
	PageSize  int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Worker    string `protobuf:"bytes,7,opt,name=worker,proto3" json:"worker,omitempty"`
	Created   int64  `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated   int64  `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
	// uuid should always math target_id
	Uuid        string `protobuf:"bytes,10,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Status      string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	MaxLimit    int32  `protobuf:"varint,12,opt,name=max_limit,json=maxLimit,proto3" json:"max_limit,omitempty"`
	ForceUpdate bool   `protobuf:"varint,13,opt,name=force_update,json=forceUpdate,proto3" json:"force_update,omitempty"`
	// translate to new service(sync) job
	Service              *Service `protobuf:"bytes,14,opt,name=service,proto3" json:"service,omitempty"`
	Profile              *Profile `protobuf:"bytes,15,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedJob) Reset()         { *m = FeedJob{} }
func (m *FeedJob) String() string { return proto.CompactTextString(m) }
func (*FeedJob) ProtoMessage()    {}
func (*FeedJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *FeedJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedJob.Unmarshal(m, b)
}
func (m *FeedJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedJob.Marshal(b, m, deterministic)
}
func (m *FeedJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedJob.Merge(m, src)
}
func (m *FeedJob) XXX_Size() int {
	return xxx_messageInfo_FeedJob.Size(m)
}
func (m *FeedJob) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedJob.DiscardUnknown(m)
}

var xxx_messageInfo_FeedJob proto.InternalMessageInfo

func (m *FeedJob) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FeedJob) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeedJob) GetRemoteKey() string {
	if m != nil {
		return m.RemoteKey
	}
	return ""
}

func (m *FeedJob) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *FeedJob) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *FeedJob) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *FeedJob) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *FeedJob) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *FeedJob) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *FeedJob) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *FeedJob) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FeedJob) GetMaxLimit() int32 {
	if m != nil {
		return m.MaxLimit
	}
	return 0
}

func (m *FeedJob) GetForceUpdate() bool {
	if m != nil {
		return m.ForceUpdate
	}
	return false
}

func (m *FeedJob) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *FeedJob) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type FeedSummary struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EntryCount           int32    `protobuf:"varint,2,opt,name=entry_count,json=entryCount,proto3" json:"entry_count,omitempty"`
	DateStart            string   `protobuf:"bytes,3,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	DateEnd              string   `protobuf:"bytes,4,opt,name=date_end,json=dateEnd,proto3" json:"date_end,omitempty"`
	ElapsedTime          int32    `protobuf:"varint,5,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedSummary) Reset()         { *m = FeedSummary{} }
func (m *FeedSummary) String() string { return proto.CompactTextString(m) }
func (*FeedSummary) ProtoMessage()    {}
func (*FeedSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *FeedSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedSummary.Unmarshal(m, b)
}
func (m *FeedSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedSummary.Marshal(b, m, deterministic)
}
func (m *FeedSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedSummary.Merge(m, src)
}
func (m *FeedSummary) XXX_Size() int {
	return xxx_messageInfo_FeedSummary.Size(m)
}
func (m *FeedSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedSummary.DiscardUnknown(m)
}

var xxx_messageInfo_FeedSummary proto.InternalMessageInfo

func (m *FeedSummary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeedSummary) GetEntryCount() int32 {
	if m != nil {
		return m.EntryCount
	}
	return 0
}

func (m *FeedSummary) GetDateStart() string {
	if m != nil {
		return m.DateStart
	}
	return ""
}

func (m *FeedSummary) GetDateEnd() string {
	if m != nil {
		return m.DateEnd
	}
	return ""
}

func (m *FeedSummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

type CommandRequest struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Arg1                 string   `protobuf:"bytes,2,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2                 string   `protobuf:"bytes,3,opt,name=arg2,proto3" json:"arg2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CommandRequest) GetArg1() string {
	if m != nil {
		return m.Arg1
	}
	return ""
}

func (m *CommandRequest) GetArg2() string {
	if m != nil {
		return m.Arg2
	}
	return ""
}

type CommandResponse struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *CommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandResponse.Unmarshal(m, b)
}
func (m *CommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandResponse.Marshal(b, m, deterministic)
}
func (m *CommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponse.Merge(m, src)
}
func (m *CommandResponse) XXX_Size() int {
	return xxx_messageInfo_CommandResponse.Size(m)
}
func (m *CommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponse proto.InternalMessageInfo

func (m *CommandResponse) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CommandResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// placeholder - Always true, indicating the entity is the placeholder
// body - The text we use for the placeholder on FriendFeed, e.g., "3 more comments" for comments or "234 other people" for likes
// num - The number of comments or likes excluded. For example, if the body is "3 more comments", then num would be 3.
// Example: http://friendfeed-api.com/v2/feed/bret?maxcomments=auto&maxlikes=auto
type FeedRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Start    int32  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Include raw text entry and comment bodies in addition to the HTML bodies
	// included by default. The raw text bodies are available as rawBody on all
	// returned entries and comments. This also adds rawLink on all entries.
	Raw bool `protobuf:"varint,4,opt,name=raw,proto3" json:"raw,omitempty"`
	// NOTICE: this is not the same as original friendfeed api
	// auto should be default it not set.
	// if max_comments set to 1, then all comments should returned.
	MaxComments          int32    `protobuf:"varint,5,opt,name=max_comments,json=maxComments,proto3" json:"max_comments,omitempty"`
	MaxLikes             int32    `protobuf:"varint,6,opt,name=max_likes,json=maxLikes,proto3" json:"max_likes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedRequest) Reset()         { *m = FeedRequest{} }
func (m *FeedRequest) String() string { return proto.CompactTextString(m) }
func (*FeedRequest) ProtoMessage()    {}
func (*FeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *FeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedRequest.Unmarshal(m, b)
}
func (m *FeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedRequest.Marshal(b, m, deterministic)
}
func (m *FeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedRequest.Merge(m, src)
}
func (m *FeedRequest) XXX_Size() int {
	return xxx_messageInfo_FeedRequest.Size(m)
}
func (m *FeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeedRequest proto.InternalMessageInfo

func (m *FeedRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeedRequest) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *FeedRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *FeedRequest) GetRaw() bool {
	if m != nil {
		return m.Raw
	}
	return false
}

func (m *FeedRequest) GetMaxComments() int32 {
	if m != nil {
		return m.MaxComments
	}
	return 0
}

func (m *FeedRequest) GetMaxLikes() int32 {
	if m != nil {
		return m.MaxLikes
	}
	return 0
}

type EntryRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryRequest) Reset()         { *m = EntryRequest{} }
func (m *EntryRequest) String() string { return proto.CompactTextString(m) }
func (*EntryRequest) ProtoMessage()    {}
func (*EntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *EntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntryRequest.Unmarshal(m, b)
}
func (m *EntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntryRequest.Marshal(b, m, deterministic)
}
func (m *EntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryRequest.Merge(m, src)
}
func (m *EntryRequest) XXX_Size() int {
	return xxx_messageInfo_EntryRequest.Size(m)
}
func (m *EntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EntryRequest proto.InternalMessageInfo

func (m *EntryRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type ProfileRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileRequest) Reset()         { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()    {}
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *ProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileRequest.Unmarshal(m, b)
}
func (m *ProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileRequest.Marshal(b, m, deterministic)
}
func (m *ProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileRequest.Merge(m, src)
}
func (m *ProfileRequest) XXX_Size() int {
	return xxx_messageInfo_ProfileRequest.Size(m)
}
func (m *ProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileRequest proto.InternalMessageInfo

func (m *ProfileRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type LikeRequest struct {
	Entry                string   `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Like                 bool     `protobuf:"varint,3,opt,name=like,proto3" json:"like,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeRequest) Reset()         { *m = LikeRequest{} }
func (m *LikeRequest) String() string { return proto.CompactTextString(m) }
func (*LikeRequest) ProtoMessage()    {}
func (*LikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *LikeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LikeRequest.Unmarshal(m, b)
}
func (m *LikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LikeRequest.Marshal(b, m, deterministic)
}
func (m *LikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeRequest.Merge(m, src)
}
func (m *LikeRequest) XXX_Size() int {
	return xxx_messageInfo_LikeRequest.Size(m)
}
func (m *LikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LikeRequest proto.InternalMessageInfo

func (m *LikeRequest) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func (m *LikeRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LikeRequest) GetLike() bool {
	if m != nil {
		return m.Like
	}
	return false
}

type CommentRequest struct {
	Entry                string   `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Comment              *Comment `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentRequest) Reset()         { *m = CommentRequest{} }
func (m *CommentRequest) String() string { return proto.CompactTextString(m) }
func (*CommentRequest) ProtoMessage()    {}
func (*CommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *CommentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentRequest.Unmarshal(m, b)
}
func (m *CommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentRequest.Marshal(b, m, deterministic)
}
func (m *CommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentRequest.Merge(m, src)
}
func (m *CommentRequest) XXX_Size() int {
	return xxx_messageInfo_CommentRequest.Size(m)
}
func (m *CommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentRequest proto.InternalMessageInfo

func (m *CommentRequest) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func (m *CommentRequest) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type CommentDeleteRequest struct {
	Entry                string   `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	User                 string   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentDeleteRequest) Reset()         { *m = CommentDeleteRequest{} }
func (m *CommentDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CommentDeleteRequest) ProtoMessage()    {}
func (*CommentDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *CommentDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentDeleteRequest.Unmarshal(m, b)
}
func (m *CommentDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentDeleteRequest.Marshal(b, m, deterministic)
}
func (m *CommentDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentDeleteRequest.Merge(m, src)
}
func (m *CommentDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_CommentDeleteRequest.Size(m)
}
func (m *CommentDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentDeleteRequest proto.InternalMessageInfo

func (m *CommentDeleteRequest) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func (m *CommentDeleteRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CommentDeleteRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type ServiceRequest struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Service              string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceRequest) Reset()         { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()    {}
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *ServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceRequest.Unmarshal(m, b)
}
func (m *ServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceRequest.Marshal(b, m, deterministic)
}
func (m *ServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRequest.Merge(m, src)
}
func (m *ServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceRequest.Size(m)
}
func (m *ServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRequest proto.InternalMessageInfo

func (m *ServiceRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ServiceRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func init() {
	proto.RegisterType((*Worker)(nil), "proto.Worker")
	proto.RegisterType((*FeedJob)(nil), "proto.FeedJob")
	proto.RegisterType((*FeedSummary)(nil), "proto.FeedSummary")
	proto.RegisterType((*CommandRequest)(nil), "proto.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "proto.CommandResponse")
	proto.RegisterType((*FeedRequest)(nil), "proto.FeedRequest")
	proto.RegisterType((*EntryRequest)(nil), "proto.EntryRequest")
	proto.RegisterType((*ProfileRequest)(nil), "proto.ProfileRequest")
	proto.RegisterType((*LikeRequest)(nil), "proto.LikeRequest")
	proto.RegisterType((*CommentRequest)(nil), "proto.CommentRequest")
	proto.RegisterType((*CommentDeleteRequest)(nil), "proto.CommentDeleteRequest")
	proto.RegisterType((*ServiceRequest)(nil), "proto.ServiceRequest")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x6d, 0x6f, 0xe3, 0x44,
	0x10, 0x8e, 0xeb, 0xe6, 0xc5, 0x93, 0x34, 0xad, 0x96, 0x5e, 0x65, 0x72, 0x42, 0x17, 0x56, 0x7c,
	0x08, 0x12, 0x14, 0xae, 0x07, 0xe2, 0x45, 0x08, 0xa9, 0x94, 0xf6, 0x54, 0x0e, 0x89, 0xca, 0xe5,
	0x84, 0x04, 0x1f, 0x22, 0x37, 0x9e, 0x36, 0x4b, 0x63, 0x3b, 0xb7, 0x5e, 0xdf, 0xb5, 0xf7, 0x57,
	0xf8, 0xc6, 0x07, 0x7e, 0x1d, 0x3f, 0x02, 0xcd, 0xbe, 0x24, 0x8e, 0xdb, 0x14, 0xf8, 0x94, 0x9d,
	0x67, 0xe6, 0x99, 0xcc, 0xce, 0x33, 0xb3, 0x86, 0x20, 0x9e, 0x8b, 0xfd, 0xb9, 0xcc, 0x55, 0xce,
	0x9a, 0xfa, 0x67, 0x00, 0x97, 0x88, 0x89, 0x81, 0xf8, 0x6f, 0xd0, 0xfa, 0x25, 0x97, 0xd7, 0x28,
	0x59, 0x1f, 0x36, 0x4e, 0x93, 0xd0, 0x1b, 0x7a, 0xa3, 0x20, 0xda, 0x38, 0x4d, 0xd8, 0x13, 0xd8,
	0xa4, 0xb8, 0x70, 0x63, 0xe8, 0x8d, 0xba, 0x07, 0x5d, 0x13, 0xbf, 0x7f, 0x82, 0x98, 0x44, 0xda,
	0xc1, 0x86, 0xe0, 0xff, 0x9e, 0x5f, 0x84, 0xbe, 0xf6, 0xf7, 0x2b, 0xfe, 0x1f, 0xf2, 0x8b, 0x88,
	0x5c, 0xfc, 0x2f, 0x1f, 0xda, 0x16, 0x60, 0x3b, 0xe0, 0x5f, 0xe3, 0xad, 0xcd, 0x4f, 0x47, 0xfa,
	0x43, 0x61, 0xd2, 0x07, 0xd1, 0x86, 0x48, 0xd8, 0x7b, 0x00, 0x12, 0xd3, 0x5c, 0xe1, 0x98, 0x02,
	0x7d, 0x8d, 0x07, 0x06, 0x79, 0x81, 0xb7, 0xec, 0x31, 0x04, 0x2a, 0x96, 0x57, 0xa8, 0xc6, 0x22,
	0x09, 0x37, 0xb5, 0xb7, 0x63, 0x80, 0xd3, 0x84, 0xed, 0x42, 0xb3, 0x50, 0xb1, 0x54, 0x61, 0x73,
	0xe8, 0x8d, 0x9a, 0x91, 0x31, 0x88, 0x32, 0x8f, 0xaf, 0x70, 0x5c, 0x88, 0xb7, 0x18, 0xb6, 0xb4,
	0xa7, 0x43, 0xc0, 0xb9, 0x78, 0x8b, 0x6c, 0x0f, 0x5a, 0x6f, 0xf4, 0xcd, 0xc3, 0xb6, 0x4e, 0x66,
	0x2d, 0x16, 0x42, 0x7b, 0x22, 0x31, 0x56, 0x98, 0x84, 0x9d, 0xa1, 0x37, 0xf2, 0x23, 0x67, 0x92,
	0xa7, 0x9c, 0x27, 0xda, 0x13, 0x18, 0x8f, 0x35, 0x19, 0x83, 0xcd, 0xb2, 0x14, 0x49, 0x08, 0x3a,
	0x93, 0x3e, 0x53, 0xfe, 0x42, 0xc5, 0xaa, 0x2c, 0xc2, 0xae, 0xc9, 0x6f, 0x2c, 0x2a, 0x2a, 0x8d,
	0x6f, 0xc6, 0x33, 0x91, 0x0a, 0x15, 0xf6, 0x4c, 0x51, 0x69, 0x7c, 0xf3, 0x23, 0xd9, 0xec, 0x7d,
	0xe8, 0x5d, 0xe6, 0x72, 0x82, 0x63, 0x93, 0x39, 0xdc, 0x1a, 0x7a, 0xa3, 0x4e, 0xd4, 0xd5, 0xd8,
	0x4b, 0x0d, 0xb1, 0x11, 0xb4, 0x0b, 0x94, 0xaf, 0xc5, 0x04, 0xc3, 0xfe, 0x4a, 0xeb, 0xcf, 0x0d,
	0x1a, 0x39, 0x37, 0x45, 0xce, 0x65, 0x7e, 0x29, 0x66, 0x18, 0x6e, 0xaf, 0x44, 0x9e, 0x19, 0x34,
	0x72, 0x6e, 0xfe, 0x87, 0x07, 0x5d, 0x12, 0xea, 0xbc, 0x4c, 0xd3, 0x58, 0x3a, 0x69, 0xbc, 0x85,
	0x34, 0x4f, 0xa0, 0x8b, 0x99, 0x92, 0xb7, 0xe3, 0x49, 0x5e, 0x66, 0x4a, 0x6b, 0xd6, 0x8c, 0x40,
	0x43, 0x47, 0x84, 0x90, 0x76, 0x54, 0xdc, 0xd8, 0x88, 0x60, 0xb5, 0x23, 0xe4, 0x5c, 0x0b, 0xf1,
	0x2e, 0x74, 0xb4, 0x1b, 0x33, 0x27, 0x5d, 0x9b, 0xec, 0xe3, 0x2c, 0xa1, 0x1b, 0xe3, 0x2c, 0x9e,
	0x17, 0x98, 0x8c, 0x95, 0x48, 0xd1, 0x0a, 0xd8, 0xb5, 0xd8, 0xcf, 0x22, 0x45, 0x1e, 0x41, 0xff,
	0x28, 0x4f, 0xd3, 0x38, 0x4b, 0x22, 0x7c, 0x55, 0x62, 0xa1, 0xb4, 0x46, 0x06, 0xb1, 0x45, 0x3a,
	0x93, 0x94, 0x88, 0xe5, 0xd5, 0x53, 0x3b, 0x56, 0xfa, 0x6c, 0xb1, 0x03, 0x5b, 0x96, 0x3e, 0xf3,
	0x23, 0xd8, 0x5e, 0xe4, 0x2c, 0xe6, 0x79, 0x56, 0xe0, 0x03, 0x49, 0xf7, 0xa0, 0x25, 0xb1, 0x28,
	0x67, 0xca, 0xa6, 0xb5, 0x16, 0xff, 0xd3, 0xb6, 0xcd, 0x95, 0x55, 0x6f, 0xdb, 0x62, 0x2a, 0x37,
	0xd6, 0x4e, 0xa5, 0x5f, 0x9b, 0xca, 0x1d, 0xf0, 0x65, 0xfc, 0x46, 0x37, 0xa9, 0x13, 0xd1, 0x91,
	0x1a, 0x44, 0xf3, 0x42, 0xb5, 0x60, 0xa6, 0x0a, 0xd7, 0xa0, 0x34, 0xbe, 0x39, 0xb2, 0xd0, 0x72,
	0xa4, 0xae, 0xb1, 0x70, 0x73, 0xae, 0x47, 0xea, 0x1a, 0x0b, 0xce, 0xa1, 0x77, 0x4c, 0x42, 0xb9,
	0x22, 0xdd, 0xac, 0x7a, 0xcb, 0x59, 0xe5, 0x1f, 0x40, 0xdf, 0xcd, 0xc4, 0x03, 0x51, 0x2f, 0xa0,
	0x4b, 0x29, 0x5d, 0xc8, 0x2e, 0x34, 0xf5, 0x04, 0xd8, 0x18, 0x63, 0x68, 0x62, 0x81, 0xd2, 0x09,
	0x40, 0x67, 0xc2, 0xa8, 0x36, 0x7d, 0xd9, 0x4e, 0xa4, 0xcf, 0xfc, 0xcc, 0x88, 0x8a, 0x99, 0x7a,
	0x38, 0xdf, 0xc8, 0xa8, 0x82, 0x76, 0xec, 0x96, 0x43, 0xec, 0xd8, 0xce, 0xcd, 0x7f, 0x85, 0x5d,
	0x8b, 0x7d, 0x8f, 0x33, 0x54, 0xff, 0x52, 0x67, 0xb8, 0x9a, 0x37, 0x58, 0xe4, 0x59, 0xdc, 0xc0,
	0x5f, 0xde, 0x80, 0x7f, 0x0b, 0x7d, 0xb7, 0x5e, 0x95, 0x06, 0x51, 0x94, 0x57, 0xb9, 0x67, 0xb8,
	0x5c, 0x4d, 0x9b, 0xd3, 0x9a, 0x07, 0x7f, 0xb7, 0xc1, 0x3f, 0x9c, 0x0b, 0xf6, 0x11, 0x74, 0x8e,
	0xb3, 0x57, 0x25, 0xd2, 0x8b, 0x58, 0x7b, 0x32, 0x07, 0x35, 0x9b, 0x37, 0xd8, 0xc7, 0x00, 0xcf,
	0x51, 0xb9, 0x17, 0x74, 0xcb, 0xfa, 0xcd, 0x7b, 0x7d, 0x6f, 0x78, 0x70, 0x22, 0x32, 0x51, 0x4c,
	0xff, 0x5b, 0xf6, 0x2f, 0xa0, 0x77, 0x82, 0x6a, 0x32, 0xb5, 0xca, 0xb3, 0x47, 0xb5, 0xd7, 0xc1,
	0x5c, 0x74, 0x50, 0x7b, 0x34, 0x78, 0x83, 0x3d, 0x03, 0xd0, 0xc4, 0xe7, 0x32, 0x9e, 0x4f, 0xd7,
	0xd1, 0x7a, 0x16, 0xd6, 0x41, 0xbc, 0xc1, 0xbe, 0x82, 0x2d, 0x4d, 0xa2, 0xff, 0x17, 0xd9, 0x65,
	0xbe, 0x8e, 0xb7, 0x5d, 0xa9, 0x93, 0xe2, 0x78, 0x83, 0x3d, 0x85, 0xde, 0x59, 0x5e, 0xa8, 0x05,
	0xb3, 0x1e, 0x72, 0x6f, 0x89, 0xdd, 0x43, 0x39, 0x99, 0x8a, 0xd7, 0x48, 0x41, 0xcc, 0x15, 0xa3,
	0x17, 0x61, 0xc0, 0x2a, 0x7c, 0xfb, 0xe2, 0xf1, 0xc6, 0xc8, 0x63, 0x5f, 0xc2, 0xce, 0x09, 0x3d,
	0xb4, 0xff, 0x9f, 0xb9, 0x0f, 0xc1, 0xe2, 0x72, 0xac, 0x1a, 0xe4, 0x6e, 0x55, 0xfd, 0x7c, 0xf2,
	0x06, 0xfb, 0xd4, 0x76, 0x50, 0x67, 0x65, 0xef, 0x54, 0xff, 0x63, 0x0d, 0xe3, 0x43, 0x08, 0xa8,
	0x07, 0x86, 0xb0, 0x5a, 0xd4, 0x8a, 0xc5, 0x1b, 0xec, 0x13, 0x08, 0x68, 0x4d, 0x4d, 0xa8, 0x2b,
	0xa6, 0xb2, 0xb8, 0x77, 0x08, 0x9f, 0x43, 0xcf, 0x2e, 0x8e, 0xe1, 0x3c, 0xaa, 0x6d, 0xd8, 0x1a,
	0xda, 0x37, 0xb0, 0x65, 0x16, 0xcd, 0xc6, 0xb1, 0xc7, 0xab, 0xbc, 0x95, 0x2d, 0xbc, 0xc3, 0xde,
	0x87, 0xce, 0x59, 0xa9, 0x7e, 0x3a, 0x2c, 0xd5, 0x94, 0xed, 0x58, 0x9f, 0xb6, 0x5e, 0x16, 0x95,
	0xe1, 0x5e, 0x2a, 0xfa, 0x19, 0xf4, 0xbe, 0x13, 0x59, 0x42, 0x5e, 0xdd, 0xe5, 0xbb, 0x9c, 0x3b,
	0x88, 0x99, 0x3a, 0x53, 0x86, 0xdd, 0xde, 0xc5, 0xdd, 0x56, 0xb7, 0xf9, 0xbe, 0xa9, 0xfb, 0x1a,
	0xda, 0xf6, 0x0b, 0xb1, 0xd2, 0x90, 0xe5, 0x57, 0x68, 0xb0, 0x57, 0x87, 0xcd, 0x87, 0x84, 0x37,
	0x2e, 0x5a, 0xda, 0xf1, 0xec, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x9f, 0x07, 0x2e, 0x7c,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	EnqueJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error)
	GetFeedJob(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*FeedJob, error)
	FinishJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error)
	FetchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	FetchGraph(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Graph, error)
	FetchFeedinfo(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Feedinfo, error)
	PostFeedinfo(ctx context.Context, in *Feedinfo, opts ...grpc.CallOption) (*Profile, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Entries on a feed being archived, returning a
	// FeedSummary when archving is completed.
	ArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ArchiveFeedClient, error)
	ForceArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ForceArchiveFeedClient, error)
	FetchFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*Feed, error)
	// Entry page return Feed as well
	FetchEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*Feed, error)
	PostEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error)
	LikeEntry(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Entry, error)
	CommentEntry(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Entry, error)
	DeleteComment(ctx context.Context, in *CommentDeleteRequest, opts ...grpc.CallOption) (*Entry, error)
	PutOAuth(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*Profile, error)
	// rpc BindAuth(OAuthUser) returns (OAuthUser) {}
	BindUserFeed(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*OAuthUser, error)
	// service
	DeleteService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Feedinfo, error)
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) EnqueJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error) {
	out := new(FeedJob)
	err := c.cc.Invoke(ctx, "/proto.Api/EnqueJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetFeedJob(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*FeedJob, error) {
	out := new(FeedJob)
	err := c.cc.Invoke(ctx, "/proto.Api/GetFeedJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FinishJob(ctx context.Context, in *FeedJob, opts ...grpc.CallOption) (*FeedJob, error) {
	out := new(FeedJob)
	err := c.cc.Invoke(ctx, "/proto.Api/FinishJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/proto.Api/FetchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchGraph(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/proto.Api/FetchGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchFeedinfo(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*Feedinfo, error) {
	out := new(Feedinfo)
	err := c.cc.Invoke(ctx, "/proto.Api/FetchFeedinfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostFeedinfo(ctx context.Context, in *Feedinfo, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/proto.Api/PostFeedinfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ArchiveFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[0], "/proto.Api/ArchiveFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiArchiveFeedClient{stream}
	return x, nil
}

type Api_ArchiveFeedClient interface {
	Send(*Entry) error
	CloseAndRecv() (*FeedSummary, error)
	grpc.ClientStream
}

type apiArchiveFeedClient struct {
	grpc.ClientStream
}

func (x *apiArchiveFeedClient) Send(m *Entry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiArchiveFeedClient) CloseAndRecv() (*FeedSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeedSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) ForceArchiveFeed(ctx context.Context, opts ...grpc.CallOption) (Api_ForceArchiveFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[1], "/proto.Api/ForceArchiveFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiForceArchiveFeedClient{stream}
	return x, nil
}

type Api_ForceArchiveFeedClient interface {
	Send(*Entry) error
	CloseAndRecv() (*FeedSummary, error)
	grpc.ClientStream
}

type apiForceArchiveFeedClient struct {
	grpc.ClientStream
}

func (x *apiForceArchiveFeedClient) Send(m *Entry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiForceArchiveFeedClient) CloseAndRecv() (*FeedSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeedSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) FetchFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/proto.Api/FetchFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FetchEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/proto.Api/FetchEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PostEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/proto.Api/PostEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) LikeEntry(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/proto.Api/LikeEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CommentEntry(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/proto.Api/CommentEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteComment(ctx context.Context, in *CommentDeleteRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/proto.Api/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PutOAuth(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/proto.Api/PutOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) BindUserFeed(ctx context.Context, in *OAuthUser, opts ...grpc.CallOption) (*OAuthUser, error) {
	out := new(OAuthUser)
	err := c.cc.Invoke(ctx, "/proto.Api/BindUserFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Feedinfo, error) {
	out := new(Feedinfo)
	err := c.cc.Invoke(ctx, "/proto.Api/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/proto.Api/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	EnqueJob(context.Context, *FeedJob) (*FeedJob, error)
	GetFeedJob(context.Context, *Worker) (*FeedJob, error)
	FinishJob(context.Context, *FeedJob) (*FeedJob, error)
	FetchProfile(context.Context, *ProfileRequest) (*Profile, error)
	FetchGraph(context.Context, *ProfileRequest) (*Graph, error)
	FetchFeedinfo(context.Context, *ProfileRequest) (*Feedinfo, error)
	PostFeedinfo(context.Context, *Feedinfo) (*Profile, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Entries on a feed being archived, returning a
	// FeedSummary when archving is completed.
	ArchiveFeed(Api_ArchiveFeedServer) error
	ForceArchiveFeed(Api_ForceArchiveFeedServer) error
	FetchFeed(context.Context, *FeedRequest) (*Feed, error)
	// Entry page return Feed as well
	FetchEntry(context.Context, *EntryRequest) (*Feed, error)
	PostEntry(context.Context, *Entry) (*Entry, error)
	LikeEntry(context.Context, *LikeRequest) (*Entry, error)
	CommentEntry(context.Context, *CommentRequest) (*Entry, error)
	DeleteComment(context.Context, *CommentDeleteRequest) (*Entry, error)
	PutOAuth(context.Context, *OAuthUser) (*Profile, error)
	// rpc BindAuth(OAuthUser) returns (OAuthUser) {}
	BindUserFeed(context.Context, *OAuthUser) (*OAuthUser, error)
	// service
	DeleteService(context.Context, *ServiceRequest) (*Feedinfo, error)
	Command(context.Context, *CommandRequest) (*CommandResponse, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_EnqueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).EnqueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/EnqueJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).EnqueJob(ctx, req.(*FeedJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetFeedJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetFeedJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/GetFeedJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetFeedJob(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FinishJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/FinishJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FinishJob(ctx, req.(*FeedJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FetchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FetchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/FetchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FetchProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FetchGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FetchGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/FetchGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FetchGraph(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FetchFeedinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FetchFeedinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/FetchFeedinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FetchFeedinfo(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostFeedinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feedinfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostFeedinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/PostFeedinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostFeedinfo(ctx, req.(*Feedinfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ArchiveFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).ArchiveFeed(&apiArchiveFeedServer{stream})
}

type Api_ArchiveFeedServer interface {
	SendAndClose(*FeedSummary) error
	Recv() (*Entry, error)
	grpc.ServerStream
}

type apiArchiveFeedServer struct {
	grpc.ServerStream
}

func (x *apiArchiveFeedServer) SendAndClose(m *FeedSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiArchiveFeedServer) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_ForceArchiveFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).ForceArchiveFeed(&apiForceArchiveFeedServer{stream})
}

type Api_ForceArchiveFeedServer interface {
	SendAndClose(*FeedSummary) error
	Recv() (*Entry, error)
	grpc.ServerStream
}

type apiForceArchiveFeedServer struct {
	grpc.ServerStream
}

func (x *apiForceArchiveFeedServer) SendAndClose(m *FeedSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiForceArchiveFeedServer) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_FetchFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FetchFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/FetchFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FetchFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FetchEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FetchEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/FetchEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FetchEntry(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PostEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PostEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/PostEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PostEntry(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_LikeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).LikeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/LikeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).LikeEntry(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CommentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CommentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/CommentEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CommentEntry(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteComment(ctx, req.(*CommentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PutOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PutOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/PutOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PutOAuth(ctx, req.(*OAuthUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_BindUserFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).BindUserFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/BindUserFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).BindUserFeed(ctx, req.(*OAuthUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueJob",
			Handler:    _Api_EnqueJob_Handler,
		},
		{
			MethodName: "GetFeedJob",
			Handler:    _Api_GetFeedJob_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _Api_FinishJob_Handler,
		},
		{
			MethodName: "FetchProfile",
			Handler:    _Api_FetchProfile_Handler,
		},
		{
			MethodName: "FetchGraph",
			Handler:    _Api_FetchGraph_Handler,
		},
		{
			MethodName: "FetchFeedinfo",
			Handler:    _Api_FetchFeedinfo_Handler,
		},
		{
			MethodName: "PostFeedinfo",
			Handler:    _Api_PostFeedinfo_Handler,
		},
		{
			MethodName: "FetchFeed",
			Handler:    _Api_FetchFeed_Handler,
		},
		{
			MethodName: "FetchEntry",
			Handler:    _Api_FetchEntry_Handler,
		},
		{
			MethodName: "PostEntry",
			Handler:    _Api_PostEntry_Handler,
		},
		{
			MethodName: "LikeEntry",
			Handler:    _Api_LikeEntry_Handler,
		},
		{
			MethodName: "CommentEntry",
			Handler:    _Api_CommentEntry_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Api_DeleteComment_Handler,
		},
		{
			MethodName: "PutOAuth",
			Handler:    _Api_PutOAuth_Handler,
		},
		{
			MethodName: "BindUserFeed",
			Handler:    _Api_BindUserFeed_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Api_DeleteService_Handler,
		},
		{
			MethodName: "Command",
			Handler:    _Api_Command_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArchiveFeed",
			Handler:       _Api_ArchiveFeed_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ForceArchiveFeed",
			Handler:       _Api_ForceArchiveFeed_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
